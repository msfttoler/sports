name: CI/CD Pipeline - Sports Prediction System

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

# Global environment variables
env:
  AZURE_FUNCTIONAPP_NAME: 'sports-prediction'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

# Ensure proper permissions for the workflow
permissions:
  contents: read
  pull-requests: write
  id-token: write
  security-events: write

jobs:
  # Job 1: Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install bandit safety black flake8 mypy

    - name: Code formatting check (Black)
      run: |
        black --check --diff .
      continue-on-error: true

    - name: Linting (Flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true

    - name: Type checking (MyPy)
      run: |
        mypy . --ignore-missing-imports
      continue-on-error: true

    - name: Security scan (Bandit)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium

    - name: Dependency vulnerability scan (Safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 2: Infrastructure Validation
  infrastructure-validation:
    name: Infrastructure Validation
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Terraform Format Check
      working-directory: infra
      run: |
        terraform fmt -check -recursive

    - name: Terraform Init
      working-directory: infra
      run: |
        terraform init

    - name: Terraform Validate
      working-directory: infra
      run: |
        terraform validate

    - name: Terraform Plan (Development)
      working-directory: infra
      run: |
        terraform plan -var-file="main.tfvars.json" -out=tfplan-dev
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Upload Terraform plans
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plans
        path: infra/tfplan-*

  # Job 3: Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [code-quality, infrastructure-validation]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ --junitxml=junit/test-results.xml --cov=. --cov-report=xml
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: junit/test-results.xml

    - name: Create deployment package
      run: |
        # Create a clean deployment package
        mkdir -p deployment-package
        
        # Copy application files
        cp -r models deployment-package/
        cp -r shared deployment-package/
        cp -r sports_data_ingestion deployment-package/
        cp -r game_predictor deployment-package/
        cp -r get_predictions deployment-package/
        cp -r get_team_stats deployment-package/
        cp -r scheduled_data_sync deployment-package/
        cp -r health_check deployment-package/
        cp requirements.txt deployment-package/
        cp host.json deployment-package/
        
        # Create zip package
        cd deployment-package
        zip -r ../sports-prediction-app.zip .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          sports-prediction-app.zip
          requirements.txt

  # Job 4: Playwright Testing
  e2e-testing:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !inputs.skip_tests }}
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tests/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt

    - name: Install Azure Functions Core Tools
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
        sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
        sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs)-prod $(lsb_release -cs) main" > /etc/apt/sources.list.d/dotnetdev.list'
        sudo apt-get update
        sudo apt-get install azure-functions-core-tools-4

    - name: Install test dependencies
      working-directory: tests
      run: npm ci

    - name: Install Playwright Browser
      working-directory: tests
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Start Azure Functions locally
      run: |
        func start &
        sleep 30
      env:
        AzureWebJobsStorage: UseDevelopmentStorage=true
        FUNCTIONS_WORKER_RUNTIME: python

    - name: Wait for service to be ready
      run: |
        timeout 60 bash -c 'until curl -s http://localhost:7071/api/health; do sleep 2; done'

    - name: Run Playwright tests
      working-directory: tests
      run: |
        npx playwright test --project=${{ matrix.browser }} --workers=1
      env:
        CI: true
        FUNCTION_APP_URL: http://localhost:7071

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-results-${{ matrix.browser }}
        path: tests/test-results/

  # Job 5: Security Testing
  security-testing:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: build
    if: ${{ !inputs.skip_tests }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tests/package-lock.json

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Install Azure Functions Core Tools
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
        sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
        sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs)-prod $(lsb_release -cs) main" > /etc/apt/sources.list.d/dotnetdev.list'
        sudo apt-get update
        sudo apt-get install azure-functions-core-tools-4

    - name: Install test dependencies
      working-directory: tests
      run: npm ci

    - name: Install Playwright
      working-directory: tests
      run: npx playwright install chromium

    - name: Start Azure Functions locally
      run: |
        func start &
        sleep 30
      env:
        AzureWebJobsStorage: UseDevelopmentStorage=true
        FUNCTIONS_WORKER_RUNTIME: python

    - name: Run security tests
      working-directory: tests
      run: |
        npx playwright test e2e/security-tests.spec.js --project=chromium
      env:
        FUNCTION_APP_URL: http://localhost:7071

    - name: Upload security test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: tests/test-results/

  # Job 6: Staging Deployment (Auto for develop, Manual approval for main)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e-testing, security-testing]
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment: 
      name: staging
      url: ${{ steps.deploy-functions.outputs.app-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Deploy Infrastructure (Staging)
      working-directory: infra
      run: |
        terraform init
        terraform plan -var-file="main.tfvars.json" -var="environment=staging" -out=tfplan-staging
        terraform apply tfplan-staging
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Get Function App Name
      id: get-function-name
      working-directory: infra
      run: |
        FUNCTION_NAME=$(terraform output -raw FUNCTION_APP_NAME)
        echo "function-name=$FUNCTION_NAME" >> $GITHUB_OUTPUT

    - name: Deploy Azure Functions
      id: deploy-functions
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ steps.get-function-name.outputs.function-name }}
        package: 'sports-prediction-app.zip'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE_STAGING }}

    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 60
        
        # Basic health check
        FUNCTION_URL="${{ steps.deploy-functions.outputs.app-url }}"
        curl -f "$FUNCTION_URL/api/health" || exit 1
        
        echo "Staging deployment successful: $FUNCTION_URL"

  # Job 7: Production Deployment (Requires manual approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: 
      name: production
      url: ${{ steps.deploy-functions.outputs.app-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Deploy Infrastructure (Production)
      working-directory: infra
      run: |
        terraform init
        terraform plan -var-file="main.tfvars.json" -var="environment=production" -out=tfplan-production
        terraform apply tfplan-production
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Get Function App Name
      id: get-function-name
      working-directory: infra
      run: |
        FUNCTION_NAME=$(terraform output -raw FUNCTION_APP_NAME)
        echo "function-name=$FUNCTION_NAME" >> $GITHUB_OUTPUT

    - name: Deploy Azure Functions
      id: deploy-functions
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ steps.get-function-name.outputs.function-name }}
        package: 'sports-prediction-app.zip'
        publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE_PRODUCTION }}

    - name: Run production smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 60
        
        # Comprehensive health check
        FUNCTION_URL="${{ steps.deploy-functions.outputs.app-url }}"
        curl -f "$FUNCTION_URL/api/health" || exit 1
        
        # Test key endpoints
        curl -f "$FUNCTION_URL/api/predictions?limit=1" || exit 1
        
        echo "Production deployment successful: $FUNCTION_URL"

    - name: Create deployment tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "production-$(date +'%Y%m%d-%H%M%S')" -m "Production deployment $(date)"
        git push origin --tags

  # Job 8: Post-Deployment Testing
  post-deployment-testing:
    name: Post-Deployment Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always() && needs.deploy-staging.result == 'success'
    
    strategy:
      matrix:
        environment: [staging]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: tests/package-lock.json

    - name: Install test dependencies
      working-directory: tests
      run: npm ci

    - name: Install Playwright
      working-directory: tests
      run: npx playwright install chromium

    - name: Run post-deployment tests
      working-directory: tests
      run: |
        npx playwright test e2e/api-tests.spec.js e2e/integration-tests.spec.js --project=chromium
      env:
        FUNCTION_APP_URL: ${{ secrets[format('FUNCTION_APP_URL_{0}', matrix.environment)] }}

    - name: Upload post-deployment test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: post-deployment-test-results-${{ matrix.environment }}
        path: tests/test-results/

  # Job 9: Notification and Reporting
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, post-deployment-testing]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Collect deployment status
      id: deployment-status
      run: |
        STAGING_STATUS="${{ needs.deploy-staging.result }}"
        PRODUCTION_STATUS="${{ needs.deploy-production.result }}"
        TESTING_STATUS="${{ needs.post-deployment-testing.result }}"
        
        echo "staging-status=$STAGING_STATUS" >> $GITHUB_OUTPUT
        echo "production-status=$PRODUCTION_STATUS" >> $GITHUB_OUTPUT
        echo "testing-status=$TESTING_STATUS" >> $GITHUB_OUTPUT

    - name: Create deployment summary
      run: |
        cat << EOF > deployment-summary.md
        # 🚀 Deployment Summary - Sports Prediction System
        
        **Workflow:** ${{ github.workflow }}
        **Run:** ${{ github.run_number }}
        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref_name }}
        **Triggered by:** ${{ github.event_name }}
        
        ## 📊 Results
        
        | Environment | Status | Result |
        |-------------|--------|--------|
        | Staging | ${{ steps.deployment-status.outputs.staging-status }} | ${{ steps.deployment-status.outputs.staging-status == 'success' && '✅' || '❌' }} |
        | Production | ${{ steps.deployment-status.outputs.production-status }} | ${{ steps.deployment-status.outputs.production-status == 'success' && '✅' || steps.deployment-status.outputs.production-status == 'skipped' && '⏭️' || '❌' }} |
        | Post-Deploy Tests | ${{ steps.deployment-status.outputs.testing-status }} | ${{ steps.deployment-status.outputs.testing-status == 'success' && '✅' || '❌' }} |
        
        ## 🔗 Links
        - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        - [Commit](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
        
        EOF

    - name: Post to Slack (if configured)
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
