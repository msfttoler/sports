name: Security and Dependency Scan

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep

    - name: Run Safety (Python dependency vulnerabilities)
      run: |
        safety check --json --output safety-results.json
      continue-on-error: true

    - name: Run Bandit (Python security issues)
      run: |
        bandit -r . -f json -o bandit-results.json
      continue-on-error: true

    - name: Run Semgrep (SAST)
      run: |
        semgrep --config=auto --json --output=semgrep-results.json .
      continue-on-error: true

    - name: Setup Node.js for npm audit
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: tests/package-lock.json

    - name: Install Node dependencies
      working-directory: tests
      run: npm ci

    - name: Run npm audit
      working-directory: tests
      run: |
        npm audit --audit-level=moderate --json > npm-audit-results.json || true
      continue-on-error: true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: |
          safety-results.json
          bandit-results.json
          semgrep-results.json
          tests/npm-audit-results.json

    - name: Create security summary
      if: always()
      run: |
        echo "# 🔒 Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Python Dependencies (Safety)" >> security-summary.md
        if [ -f safety-results.json ]; then
          echo "Safety scan results found" >> security-summary.md
        else
          echo "No vulnerabilities found" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Code Security (Bandit)" >> security-summary.md
        if [ -f bandit-results.json ]; then
          echo "Bandit scan results found" >> security-summary.md
        else
          echo "No security issues found" >> security-summary.md
        fi

  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest

    - name: Install Checkov
      run: |
        pip install checkov

    - name: Run Checkov on Terraform
      working-directory: infra
      run: |
        checkov -d . --framework terraform --output json --output-file-path checkov-results.json
      continue-on-error: true

    - name: Install TFSec
      run: |
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

    - name: Run TFSec
      working-directory: infra
      run: |
        tfsec . --format json --out tfsec-results.json
      continue-on-error: true

    - name: Upload infrastructure security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: infrastructure-security-results
        path: |
          infra/checkov-results.json
          infra/tfsec-results.json

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install TruffleHog
      run: |
        curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin

    - name: Run TruffleHog
      run: |
        trufflehog git file://. --json > trufflehog-results.json
      continue-on-error: true

    - name: Upload secret scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secret-scan-results
        path: trufflehog-results.json

  compliance-check:
    name: Compliance and Policy Check
    runs-on: ubuntu-latest
    needs: [dependency-scan, infrastructure-security, secret-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all security results
      uses: actions/download-artifact@v4
      with:
        path: security-results

    - name: Generate compliance report
      run: |
        python .github/scripts/generate_compliance_report.py

    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance-report.json

    - name: Check compliance status
      run: |
        COMPLIANCE_STATUS=$(python -c "import json; data=json.load(open('compliance-report.json')); print(data['compliance_status'])")
        
        echo "Compliance Status: $COMPLIANCE_STATUS"
        
        if [[ "$COMPLIANCE_STATUS" == "FAIL"* ]]; then
          echo "❌ Compliance check failed!"
          exit 1
        elif [[ "$COMPLIANCE_STATUS" == "WARN"* ]]; then
          echo "⚠️ Compliance check passed with warnings"
        else
          echo "✅ Compliance check passed"
        fi

    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const report = JSON.parse(fs.readFileSync('compliance-report.json', 'utf8'));
            
            const comment = `## 🔒 Security Scan Results
            
            **Compliance Status:** ${report.compliance_status}
            
            ### Summary
            - 🔴 Critical: ${report.summary.critical_issues}
            - 🟠 High: ${report.summary.high_issues}
            - 🟡 Medium: ${report.summary.medium_issues}
            - 🟢 Low: ${report.summary.low_issues}
            
            ### Details
            ${Object.entries(report.details).map(([key, value]) => 
              `- **${key.replace('_', ' ').toUpperCase()}:** ${value} issues`
            ).join('\n')}
            
            _Scan completed at: ${report.scan_date}_
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not read compliance report:', error);
          }
